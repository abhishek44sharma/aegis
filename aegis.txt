x 2022-12-19 complete `safe` tests. pri:A +safe @‚ñ∂Ô∏è
x 2022-12-19 `./safe/test-admin-api-upsert-secret.sh` pri:A +safe @‚ñ∂Ô∏è
x 2022-12-19 `./safe/test-notary-api-bootstrap.sh` pri:A +safe @‚ñ∂Ô∏è
x 2022-12-19 `./safe/test-notary-api-workload.sh` pri:A +safe @‚ñ∂Ô∏è
x 2022-12-19 `./safe/test-probe-api-healthz.sh` pri:A +safe @‚ñ∂Ô∏è
x 2022-12-19 `./safe/test-probe-api-readyz.sh` pri:A +safe @‚ñ∂Ô∏è
x 2022-12-19 `./safe/test-workload-api-fetch-secrets.sh` pri:A +safe @‚ñ∂Ô∏è
(A) Implement `notary` API. +notary 
x 2022-12-21 Implement `sidecar` API. pri:A +sidecar @‚ñ∂Ô∏è
x 2022-12-19 `./safe/test-notary-api-readyz--after-bootstrap.sh` pri:A +safe
(C) Finalize `README.md`.
(D) Process `TODO:` items in the projects. +aegis 
(B) Finalize diagrams. +aegis 
(C) create a broad-brushstrokes roadmap.
(D) the website needs some content +aegis 
(E) what about mTLS? Maybe offload it to a mesh and keep it out of scope and/or conditionally enable with a configuration flag. +aegis 
(E) there is almost no logging in fail cases, incrase logging +aegis 
(E) right now everything is in memory; maybe provide other backing stores +aegis
(B) note that the initial prototype stores things ‚Äúin memory‚Äù without encryption; it might be nice to introduce `sops` next when things stabilize +aegis 
(C) Add documentation to all publicly exported functions everywhere +aegis 
(C) Code cleanup everywhere +aegis
(B) use `sops` and `age` in some way, shape or form +aegis +safe @mvp 
(E) ability to rotate notaryId and safeId. +aegis 
(D) idea: integration with `SPIRE`. If there is a SPIRE server that `aegis` can piggyback on, then let it manage the registration instead of all these token and secret exchange.
(C) main goal is to keep things simple, usable, and cloud-native. I will most certainly assume some form of Kubernetes exists. +aegis 
(C) main goal: be pragrmatic +aegis ‚Äî find the right balance between convenience and security by default, and let people to opt in for more secure updates if they want/need to. ‚Äî the in memory store is a very good example: if people want, they can opt in for sops, but keeping thing in memory is secure enough in itself, the inconvenience here will be losing secrets when safe goes down; some can tolerate it, and some might need to persist the secrets in an encrypted way.
(D) exchange workload secrets and notary token regularly. +aegis 
(C) audit logging on api actions +aegis 
(C) none of the deployments have any limits; set some reasonable limits +aegis 
(C) Create a service account instead of using the default one +aegis
(E) sign the docker images and other artifacts that you distribute +aegis 
(A) record a demo video +aegis 
(A) tx renewal b4 29th @üö® 
(B) convert minikube kubectl to kubectl in the deploy makefiles; maybe add a deploy-minikube as an alternative option +aegis 
(B) add make all; make install; make clean -- those are typical things people expect in makefiles +aegis 
(B) ensure that all `make` commands are working as expected +aegis 
(B) create a top-level makefile that builds and deploys all the child projects +aegis
environment variable check before launching containers +aegis 
(B) enable debug-level logging +aegis 
(B) add list of technologies used in README, and also add licenses of those to the things that you bundle +aegis 