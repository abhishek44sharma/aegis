x 2022-12-19 complete `safe` tests. pri:A +safe @‚ñ∂Ô∏è
x 2022-12-19 `./safe/test-admin-api-upsert-secret.sh` pri:A +safe @‚ñ∂Ô∏è
x 2022-12-19 `./safe/test-notary-api-bootstrap.sh` pri:A +safe @‚ñ∂Ô∏è
x 2022-12-19 `./safe/test-notary-api-workload.sh` pri:A +safe @‚ñ∂Ô∏è
x 2022-12-19 `./safe/test-probe-api-healthz.sh` pri:A +safe @‚ñ∂Ô∏è
x 2022-12-19 `./safe/test-probe-api-readyz.sh` pri:A +safe @‚ñ∂Ô∏è
x 2022-12-19 `./safe/test-workload-api-fetch-secrets.sh` pri:A +safe @‚ñ∂Ô∏è
x 2022-12-22 Implement `notary` API. pri:A +notary
x 2022-12-21 Implement `sidecar` API. pri:A +sidecar @‚ñ∂Ô∏è
x 2022-12-19 `./safe/test-notary-api-readyz--after-bootstrap.sh` pri:A +safe
x 2023-01-10 Finalize `README.md`. pri:C
x 2023-01-10 Process `TODO:` items in the projects. pri:D +aegis
x 2022-12-24 Finalize diagrams. pri:B +aegis
x 2023-01-10 create a broad-brushstrokes roadmap. pri:C
x 2023-01-10 the website needs some content pri:D +aegis
x 2023-01-10 what about mTLS? Maybe offload it to a mesh and keep it out of scope and/or conditionally enable with a configuration flag. pri:E +aegis
x 2023-01-10 there is almost no logging in fail cases, incrase logging pri:E +aegis
x 2023-01-10 right now everything is in memory; maybe provide other backing stores pri:E +aegis
x 2023-01-10 note that the initial prototype stores things ‚Äúin memory‚Äù without encryption; it might be nice to introduce `sops` next when things stabilize pri:B +aegis
x 2023-01-10 Add documentation to all publicly exported functions everywhere pri:C +aegis
x 2023-01-10 Code cleanup everywhere pri:C +aegis
x 2023-01-01 use `sops` and `age` in some way, shape or form pri:B +aegis +safe @mvp
x 2023-01-10 ability to rotate notaryId and safeId. pri:E +aegis
x 2023-01-10 idea: integration with `SPIRE`. If there is a SPIRE server that `aegis` can piggyback on, then let it manage the registration instead of all these token and secret exchange. pri:D
x 2023-01-10 main goal is to keep things simple, usable, and cloud-native. I will most certainly assume some form of Kubernetes exists. pri:C +aegis
x 2023-01-10 main goal: be pragrmatic  ‚Äî find the right balance between convenience and security by default, and let people to opt in for more secure updates if they want/need to. ‚Äî the in memory store is a very good example: if people want, they can opt in for sops, but keeping thing in memory is secure enough in itself, the inconvenience here will be losing secrets when safe goes down; some can tolerate it, and some might need to persist the secrets in an encrypted way. pri:C +aegis
x 2023-01-10 exchange workload secrets and notary token regularly. pri:D +aegis
x 2023-01-10 audit logging on api actions pri:C +aegis
x 2023-01-10 none of the deployments have any limits; set some reasonable limits pri:C +aegis
x 2023-01-10 Create a service account instead of using the default one pri:C +aegis
x 2023-01-10 sign the docker images and other artifacts that you distribute pri:E +aegis
x 2022-12-23 record a demo video pri:A +aegis @‚ñ∂Ô∏è
x 2022-12-23 tx renewal b4 29th pri:A @üö®
x 2023-01-01 convert minikube kubectl to kubectl in the deploy makefiles; maybe add a deploy-minikube as an alternative option pri:B +aegis
x 2023-01-10 add make all; make install; make clean -- those are typical things people expect in makefiles pri:B +aegis
x 2023-01-10 ensure that all `make` commands are working as expected pri:B +aegis
x 2023-01-10 create a top-level makefile that builds and deploys all the child projects pri:B +aegis
x 2023-01-10 environment variable check before launching containers pri:B +aegis
x 2023-01-10 enable debug-level logging pri:B +aegis
x 2023-01-10 add list of technologies used in README, and also add licenses of those to the things that you bundle pri:B +aegis
x 2023-01-10 documentation: notary should be up and running first  ‚Äî plus, it wouild be nice if safe for example can check the existence of notary pri:C +safe
x 2023-01-10 in this current implementation, sidecars are constantly polling safe even though they don't have any secrets registered; they should back off after a while exponentially pri:B +sidecar
x 2023-01-01 make notary deployable inside a cluster too. pri:A +aegis @mvp
x 2022-12-23 a mini operations manual on README.md pri:A due:2022-12-24 +aegis @‚ñ∂Ô∏è
x 2023-01-10 you need a CONTRIBUTING.md pri:E +aegis
x 2023-01-01 A mini powerpoint presentation would be useful too. pri:B +aegis
x 2023-01-10 A second app that talks to Aegis over mTLS and can be used to unlock Safe if Safe gets evicted and restarted for whatever reason. This app will require to store the admin token in memory (to trigger the restore operation via the Safe APIs). It can be deployed in a HA setup so that if one of them crashes, it can resync with others. I would like to call them ‚ÄúOracles‚Äù and keep it as a group of three. pri:B
x 2023-01-10 implement secure component-to-component connectivity using either TLS or mTLS. ‚Äîaegis-keygen can generate certs if needed pri:B +aegis
x 2022-12-24 make `make install` work for users with no write access to dockerhub. pri:A +aegis @‚ñ∂Ô∏è
x 2022-12-24 establish a secure way to deliver the admin token  -- Securing the admin key you will need a private key and a public key; you will have to keep your private key ‚Äúprivate‚Äùsafe:PUT /v1/crypto/key { publicKey: key } will register your public key.GET /v1/admin/key => will return the admin key encrypted with your public key.you can use aegis-keygen command line utility to generate a key pair.you can again use aegis-keygen command line utility to decrypt your admin tokenif either safe or notary crashes and restarts (after a successful bootstrap),you'll have to provide your private key to safe to recover from last knownstate. your private key is never logged or stored on disk, and it will bewiped out from memory as soon as there is no more need for it.Key Rotation: to be done in the future; right now admin token, notary token, and workload tokens are everlasting once they are dispatched.    ‚Äî  1Password model: The encryption key is generated when you create the account. The only feasible way for it to be compromised is if the user leaks/shares it. Users don‚Äôt pick the key, nor is it derived from the account password. ‚Äî In our case `Save` can be used to return a private key, public key pair to the user; it will return the same pair only once; admin will store the keypair; and they will use the public key to retrieve an encrypted admin  token. The keygen endpoint will be locked after 10 consecutive uses. pri:B +aegis @üö® @mvp
x 2023-01-10 add license of nicolaka/netshoot to sentinel, since it is an almost item-by-item fork. pri:B
x 2023-01-10 update the README files of the child projects too pri:C +aegis
x 2023-01-10 multi-cluster federation?  ‚Äî we can expose Safe (securely) to other clusters (only) for an initial stab at the solution. but do we really need it. ‚Äî the pods will likely want their secrets closer to them. pri:E +aegis
x 2023-01-10 create channels to provide feedback (maybe a discord group too; or maybe link z2h discord instaed  ) pri:C +aegis
x 2023-01-10 maybe create helm templates to customize all these yaml files. pri:C +aegis
x 2023-01-10 automatic sidecar injection? pri:C +aegis
x 2022-12-24 replace aegis-workload-key with aegis-workload-id everywhere for consistency pri:A +aegis @‚ñ∂Ô∏è
x 2023-01-10 we need an unregister flow for the deleted workloads too. -- or do we? not sure  -- since the workload can revive, it might still be entitled to the same secrets. pri:E +aegis
x 2023-01-03 create a mini powerpoint (like a pitch deck) pri:A +aegis @‚ñ∂Ô∏è
x 2023-01-01 age as an encryption tool https://github.com/FiloSottile/age pri:B +aegis @home
x 2023-01-10 enable automatic (and manual) rotation of tokens and secrets pri:C +aegis
x 2023-01-10 sealed secrets model with a twist: Sealed Secrets controller on the cluster, and the public key is available to the developers. This way, only the cluster can decrypt the secrets, and the developers can only encrypt them. -- so if the Notary has a persistent private key and it dispatches public key to Safe; then Safe can encrypt the admin token; it can send the encrypted admin token to Notary for validation. -- whatever the cluster operator enters as the token will be encrypted and sent to notary too. -- this way, safe can remain stateless, it does not have to know the admin token to restore its state; it only has to store an encrypted version of admin token on a persistent storage. ---- that solves the first part of the problem. -- the second part is restoring secrets when safe gets evicted -- the third part is rotation of the private keys and restoring the private key when notary gets evicted and --- but then we end up keeping the private key in the cluster -- even if we have a replicated setup if the private key is lost, access to the entire data is gone. -- so better to deliver a private key to administrator too; so if notary crashes the admin will have to provide the private key, and if vault crashes, everything is fine. -- then admin can manage the rotation of keys too by providing the private key that they have. -- private key  is NEVER stored on cluster disk, it will always be in memory. --- only encytped data will be stored on disk -- and this way we can also encrypt the kv pairs on disk using the public key too. pri:B
x 2023-01-01 with SPIRE, `notary` becomes mostly redundant; remove it from the project. pri:A +aegis
x 2023-01-01 Safe should create and store admin token in memory -- 1. the admin token can only be retrieved from sentinel (SVID authentication) -- 2. the admin token can only be requested once. -- 3. For this phase we just return the token and the token is stored in memory, so if safe crashes the token is gone. -- 4. In upcoming phases there will be ways to persist the token in an encrypted way. pri:A +safe
x 2023-01-01 dispatch identities to `safe` and `sentinel` too. pri:A +aegis
x 2023-01-01 use a simple CI tool (Ansible is as good as any) to fetch an admin token and generate some secrets for a workload. pri:A
x 2023-01-10 Ability to use redis as a backing store pri:B +safe
x 2023-01-10 automate uploading the site to s3. pri:B
x 2023-01-10 website is not responsive. pri:B
x 2023-01-10 sentinel, but lighter and more secure (i.e. w/o a bash shell) pri:B +sentinel +aegis
x 2023-01-10 create a prodocution reference architecture pri:C +aegis
: @‚ñ∂Ô∏è @üö® @home @mvp 
x 2023-01-10 instead of waiting for 15 secs; check spire server‚Äôs health using kubectl. pri:C
x 2023-01-10 Sign the docker images pri:B +aegis
x 2023-01-10 setup liveness, readiness, and startup probes pri:B +aegis
x 2023-01-10 add instructions to uninstall to README too. pri:B
x 2023-01-10 the makefiles should not deploy the sample workload by default pri:B +aegis
x 2023-01-10 add resource limits pri:B
x 2023-01-10 audit logs for `safe` pri:C +safe
x 2023-01-10 template transformation on secrets before persisting them. pri:B
x 2023-01-10 Since this is a development deployment, I can execute a shell inside this sentinel; for production deployments, there will be a more hardened version of sentinel where you will be allowed to execute a binary that is only allowed to talk to SAFE and not fiddle with anything else on the pod‚Äôs system. pri:A
x 2023-01-24 : add links to technoligies used in the readme  . pri:A +aegis
x 2023-01-10 web a mini logo next to Aegis header + a favicon pri:B
x 2023-01-10 various timeout should be configurable (like the polling interval of the sidecar. pri:B
x 2023-01-10 Do a basic benchmark: How much CPU and memory does a typical Aegis setup requires; how much does it change when the number of workloads increase? pri:C
x 2023-01-10 update the demo video link pri:A
x 2023-01-10 ability to install Aegis when there already is an existing spire rollout. Would likely mean customizing the trust root etc. pri:A
x 2023-01-24 e2e test with a different trust domain +aegis
x 2023-01-10 design a dev workflow with a local repo. pri:B
x 2023-01-10 add some minimal documentation for aegis-sdk-go on how to use the SDK. pri:A
x 2023-01-10 create a tutorial telling how to set things up from scratch with and without sdk. pri:B
x 2023-01-10 customization test for trust domain change pri:B
x 2023-01-10 have a place for the community to interact realtime (Slack or Discord etc). ‚Äî Not urgent. pri:C
x 2023-01-24 a mini build script to copy assets to aegies/install/k8s
x 2023-01-24 add a section that describes all the environment variables that can be used to configure Aegis, in detail.
x 2023-01-24 Write a production guideline: what action needs to be taken for a production setup (hardening secrets, volumes etc)
x 2023-01-24 test the demo with and witout sidecar
x 2023-01-24 getting certificate expiration email from letsencrypt. make sure certificates are in good condition pri:A +aegis +z2h
x 2023-01-24 ability to delete secrets pri:A
x 2023-01-24 check what happens if you have an encrypted file but a different encryption key that does not match pri:A
x 2023-01-24 spell check all the documentation/tutorial/etc on the website. pri:A
x 2023-01-24 version control secrets. -- if an operator updates a secret, store N older versions on the drive too. N should be configurable.
x 2023-01-24 ability to opt-out from disk peristence: I am weird and I want everythign stored in memory
x 2023-01-24 "when not to use aegis" is missin on the website.
x 2023-01-24 clean up the repo readmes too.
x 2023-01-24 test usage in a meshed environment (such as istio)
x 2023-01-24 dockerhub readmes are all empty.
x 2023-01-24 reduce aegis log level before cutting a new release.
x 2023-01-24 top navigation: remove privacy, add community (there is a privacy link at the bottom of every page; that should be enough)
x 2023-01-24 Failed to open encrypted file no identity matched any of the recipientsthis happens when there is an encrypted file on disk but there is no key to decrypt it. decide what to do when that happens.
x 2023-01-24 check if the metrics server and friends are still working in the cluster -- write instructions to enable it on a pristine minikube.
x 2023-01-24 when you remove environment variables things stop working. try with a minimal/zero set of env vars and make sure defaults work. pri:A
x 2023-01-24 multiline spiffe id template did not work; find what the problem with the format is (possible a newline in the template literal or something)